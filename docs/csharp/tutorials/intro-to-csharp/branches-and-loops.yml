### YamlMime:Tutorial
title: <span data-ttu-id="1f50c-101">Dal ve döngü deyimleri ile koşullu mantık öğrenin</span><span class="sxs-lookup"><span data-stu-id="1f50c-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Dallar ve döngüler- C# etkileşimli öğreticiye giriş
  description: Dallar ve döngüler hakkında bu öğreticide, etkileşimli olarak öğrenmek C# için tarayıcınızı kullanacaksınız. Kod yazacak C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="1f50c-105">Liste koleksiyonu</span><span class="sxs-lookup"><span data-stu-id="1f50c-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850786"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="1f50c-106">Bu öğretici, değişkenleri inceleyen ve bu değişkenlere göre yürütme yolunu değiştiren bir kod yazmayı öğretir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="1f50c-107">Etkileşimli olarak yazmak C# ve kodunuzu derleyip çalıştırmanın sonuçlarını görmek için tarayıcınızı kullanacaksınız.</span><span class="sxs-lookup"><span data-stu-id="1f50c-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="1f50c-108">Bu öğreticide, ' de C#dallanma ve döngü yapılarını keşfeden oluşan bir dizi ders bulunur.</span><span class="sxs-lookup"><span data-stu-id="1f50c-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="1f50c-109">Bu dersler, C# dilin temellerini öğretir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="1f50c-110">If ifadesini kullanarak kararlar alın</span><span class="sxs-lookup"><span data-stu-id="1f50c-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="1f50c-111">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="1f50c-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="1f50c-112">Bunu yapmak için, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır** düğmesine tıklayın:</span><span class="sxs-lookup"><span data-stu-id="1f50c-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="1f50c-113">Bildirimi, toplamın 10 `b` ' dan küçük olacak şekilde değiştirin:</span><span class="sxs-lookup"><span data-stu-id="1f50c-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="1f50c-114">**Çalıştır** düğmesine tekrar tıklayın.</span><span class="sxs-lookup"><span data-stu-id="1f50c-114">Click the **Run** button again.</span></span> <span data-ttu-id="1f50c-115">Yanıt 10 ' dan az olduğu için hiçbir şey yazdırılmaz.</span><span class="sxs-lookup"><span data-stu-id="1f50c-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="1f50c-116">Test ettiğiniz **koşul** false 'tur.</span><span class="sxs-lookup"><span data-stu-id="1f50c-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="1f50c-117">Yalnızca bir `if` deyimin olası dallarından birini yazdığınız için yürütülecek bir kodunuz yok: doğru dal.</span><span class="sxs-lookup"><span data-stu-id="1f50c-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="1f50c-118">Keşfederken C# (veya herhangi bir programlama dilini), kod yazarken hata oluşturursunuz.</span><span class="sxs-lookup"><span data-stu-id="1f50c-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="1f50c-119">**Derleyici** bu hataları bulacak ve size rapor eder.</span><span class="sxs-lookup"><span data-stu-id="1f50c-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="1f50c-120">Çıktı hata iletileri içerdiğinde, nelerin düzeltileceğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.</span><span class="sxs-lookup"><span data-stu-id="1f50c-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="1f50c-121">Bu alıştırma, C# kod yapısını öğrenmenize yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="1f50c-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="1f50c-122">Bu ilk örnek, `if` ve Boolean türlerin gücünü gösterir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="1f50c-123">*Boolean* , iki değerden birine sahip olabilir bir değişkendir: `true` veya. `false`</span><span class="sxs-lookup"><span data-stu-id="1f50c-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="1f50c-124">C#Boole değişkenleri `bool` için özel bir tür tanımlar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="1f50c-125">`if` İfade a`bool`değerini denetler.</span><span class="sxs-lookup"><span data-stu-id="1f50c-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="1f50c-126">Değer `true`olduğunda, `if` yürütülür ' i izleyen ifade.</span><span class="sxs-lookup"><span data-stu-id="1f50c-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="1f50c-127">Aksi takdirde, atlanır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="1f50c-128">Bu koşullara göre koşulları denetleme ve deyimleri yürütme işlemi çok güçlüdür.</span><span class="sxs-lookup"><span data-stu-id="1f50c-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="1f50c-129">Daha fazlasını inceleyelim.</span><span class="sxs-lookup"><span data-stu-id="1f50c-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1f50c-130">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1f50c-131">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1f50c-132">Eğer ve başka bir birlikte çalışır yap</span><span class="sxs-lookup"><span data-stu-id="1f50c-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"1f50c-133\">Doğru ve yanlış dallarda farklı kodu yürütmek için, koşul yanlış olduğunda yürütülen bir `else` dal oluşturursunuz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"1f50c-134\">Şunu deneyin:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"1f50c-135\">`else` Anahtar sözcüğünü izleyen ifade yalnızca `false`test edilen koşul olduğunda yürütülür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"1f50c-136\">`if` Ve`else` Boole koşulları ile birleştirme, ihtiyacınız olan tüm gücü sağlar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"1f50c-137\">`if` Ve`else` deyimlerinin altındaki girintileme insan okuyucular içindir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"1f50c-138\">Dil C# , girintileme veya boşluk olarak kabul etmez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"1f50c-139\">`if` Or`else` anahtar sözcüğünü izleyen ifade, koşula göre yürütülür.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"1f50c-140\">Bu öğreticideki tüm örnekler, ifadelerin denetim akışına göre satırları girintilemek için ortak bir uygulama izler.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"1f50c-141\">Girintileme önemli olmadığından, birden fazla deyimin koşullu olarak yürütülen `{` bloğun `}` bir parçası olmasını istediğiniz zaman göstermek için ve kullanmanız gerekir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"1f50c-142\">C#programcılar genellikle bu ayraçları tüm `if` ve `else` yan tümcelerde kullanır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"1f50c-143\">Aşağıdaki örnek, yeni oluşturduğunuz şeydir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"1f50c-144\">Deneyin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"1f50c-145\">Bu öğreticinin geri kalanında, kod örnekleri, kabul edilen uygulamaları takip eden ayraçları içerir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"1f50c-146\">Daha karmaşık koşulları test edebilirsiniz:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"1f50c-147\">`==` *Eşitlik*için simge testi.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"1f50c-148\">' `==` Yi kullanarak, ' de gördüğünüz şekilde `a = 5`testi, atamanın eşitliğine ayırır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"1f50c-149\">\"Ve\" temsil eder. `&&`</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"1f50c-150\">Doğru dalda deyimin yürütülmesi için her iki koşulun de true olması gerektiği anlamına gelir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"1f50c-151\">Bu örnekler Ayrıca, ve `{` `}`içinde yer alan her bir koşullu dalda birden çok deyim olduğunu gösterir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"1f50c-152\">\"Veya\" öğesini `||` göstermek için de kullanabilirsiniz:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"1f50c-153\">`a`, Ve`b`değerlerini değiştirin ve arasında`&&` geçiş yapın.`||` `c`</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"1f50c-154\">`&&` Ve`||` işleçlerinin nasıl çalıştığını daha fazla anlayacaksınız.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1f50c-155\">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1f50c-156\">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1f50c-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="1f50c-157">İşlemleri yinelemek için döngüleri kullanma</span><span class="sxs-lookup"><span data-stu-id="1f50c-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="1f50c-158">Daha büyük programlar oluşturmak için başka bir önemli kavram **döngülere**sahiptir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="1f50c-159">Birden çok kez yürütülmesini istediğiniz deyimleri yinelemek için döngüleri kullanacaksınız.</span><span class="sxs-lookup"><span data-stu-id="1f50c-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="1f50c-160">Etkileşimli pencerede şu kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="1f50c-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="1f50c-161">İfade bir koşulu denetler ve ' den `while`sonraki ifadeyi yürütür. `while`</span><span class="sxs-lookup"><span data-stu-id="1f50c-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="1f50c-162">Koşul false olana kadar koşulu denetlemeyi ve bu deyimleri yürütmeyi tekrarlayacak.</span><span class="sxs-lookup"><span data-stu-id="1f50c-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="1f50c-163">Bu örnekte başka bir yeni işleç vardır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-163">There's one other new operator in this example.</span></span> <span data-ttu-id="1f50c-164">Değişken, **artırma** işlecinden `++`sonra. `counter`</span><span class="sxs-lookup"><span data-stu-id="1f50c-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="1f50c-165">Sayaç değerine 1 ekler ve bu değeri sayaç değişkeninde depolar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="1f50c-166">Kodu yürüttığınızdan `while` döngü koşulunun false olarak geçdiğinizden emin olun.</span><span class="sxs-lookup"><span data-stu-id="1f50c-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="1f50c-167">Aksi takdirde, programınızın hiç bitmediğini **sonsuz bir döngü** oluşturursunuz.</span><span class="sxs-lookup"><span data-stu-id="1f50c-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="1f50c-168">Kodunuzu çalıştıran altyapının zaman aşımına uğradığından ve programınızda hiçbir çıkış göreceğinden, bunu gösterelim.</span><span class="sxs-lookup"><span data-stu-id="1f50c-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="1f50c-169">`while` Döngü ,`while`sonrasında kodu yürütmeden önce koşulu sınar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="1f50c-170">`do` ... `while` döngü önce kodu yürütür ve sonra koşulu denetler.</span><span class="sxs-lookup"><span data-stu-id="1f50c-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="1f50c-171">Şöyle görünür:</span><span class="sxs-lookup"><span data-stu-id="1f50c-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="1f50c-172">Bu `do` döngü ve önceki `while` döngü aynı şekilde çalışır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="1f50c-173">Bir son döngü ifadesine geçelim.</span><span class="sxs-lookup"><span data-stu-id="1f50c-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1f50c-174">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1f50c-175">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1f50c-176">For döngüsü ile çalışma</span><span class="sxs-lookup"><span data-stu-id="1f50c-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="1f50c-177">C# Kodda göreceğiniz diğer bir yaygın döngü açıklaması `for` döngüdür.</span><span class="sxs-lookup"><span data-stu-id="1f50c-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="1f50c-178">Etkileşimli pencerede şu kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="1f50c-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="1f50c-179">Bu, `while` döngüyle aynı çalışmayı `do` ve zaten kullandığınız döngüyü yapar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="1f50c-180">`for` İfadesinin nasıl çalıştığını denetleyen üç bölümü vardır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="1f50c-181">İlk bölüm **for başlatıcıdır**: `int counter = 0;` Loop değişkeni olduğunu bildirir `counter` ve başlangıç değerini olarak `0`ayarlar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="1f50c-182">Orta kısım **for koşuludur**: `counter < 10` sayacın değeri 10 ' dan `for` az olduğu sürece bu döngünün yürütülmeye devam ettiğini bildirir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="1f50c-183">Son bölüm, **Yineleyici için**: `counter++` `for` deyimden sonra blok yürütüldükten sonra döngü değişkeninin nasıl değiştirileceğini belirtir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="1f50c-184">Burada, blok her yürütüldüğünde `counter` 1 ' in artırılabilmelidir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="1f50c-185">Bunlarla deneyin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-185">Experiment with these yourself.</span></span> <span data-ttu-id="1f50c-186">Aşağıdakilerin her birini deneyin:</span><span class="sxs-lookup"><span data-stu-id="1f50c-186">Try each of the following:</span></span>


    - <span data-ttu-id="1f50c-187">Başlatıcıyı farklı bir değerle başlayacak şekilde değiştirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="1f50c-188">Koşulu, farklı bir değerde durdurulacak şekilde değiştirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="1f50c-189">İşiniz bittiğinde, öğrendiklerinizi kullanmak için kendinize bir kod yazmak üzere ilerlim.</span><span class="sxs-lookup"><span data-stu-id="1f50c-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1f50c-190">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1f50c-191">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1f50c-192">Dalları ve döngüleri birleştirme</span><span class="sxs-lookup"><span data-stu-id="1f50c-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="1f50c-193">Artık, ve içindeki `if` C# döngü yapılarını gördüğünüze göre, 3 ' e bölünebilen 1 ile 20 arasındaki C# tüm tamsayıların toplamını bulmak için kod yazıp yazbileceğinizi görün.</span><span class="sxs-lookup"><span data-stu-id="1f50c-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="1f50c-194">İşte birkaç ipucu:</span><span class="sxs-lookup"><span data-stu-id="1f50c-194">Here are a few hints:</span></span>


    - <span data-ttu-id="1f50c-195">`%` İşleci, bir bölme işleminin kalanını verir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="1f50c-196">`if` İfade, bir sayının toplamın bir parçası olup olmadığını görmek için koşul sağlar.</span><span class="sxs-lookup"><span data-stu-id="1f50c-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="1f50c-197">`for` Döngü, 1 ile 20 arasındaki tüm sayılar için bir dizi adımı yinelemenize yardımcı olabilir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="1f50c-198">Kendiniz deneyin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-198">Try it yourself.</span></span> <span data-ttu-id="1f50c-199">Sonra nasıl yapıldığını kontrol edin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-199">Then check how you did.</span></span> <span data-ttu-id="1f50c-200">İpucu olarak bir yanıt için 63 almalısınız.</span><span class="sxs-lookup"><span data-stu-id="1f50c-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="1f50c-201">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1f50c-202">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1f50c-203">Sınama Tamam</span><span class="sxs-lookup"><span data-stu-id="1f50c-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="1f50c-204">Bunun gibi bir konuyla karşılaştınız mı?</span><span class="sxs-lookup"><span data-stu-id="1f50c-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="1f50c-205">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="1f50c-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="1f50c-206">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="1f50c-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="1f50c-207">Tebrikler!</span><span class="sxs-lookup"><span data-stu-id="1f50c-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="1f50c-208">"Dallar ve döngüler" Etkileşimli öğreticisini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="1f50c-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="1f50c-209">Sonraki etkileşimli öğreticiye başlamak için aşağıdaki **liste koleksiyonu** bağlantısına tıklayabilir veya [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret ederek .NET Core SDK indirebilir, makinenizde bir proje oluşturabilir ve kodlamadan haberdar olabilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="1f50c-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="1f50c-210">"Sonraki adımlar" bölümü, sizi bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="1f50c-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="1f50c-211">Bu kavramlar hakkında daha fazla bilgi için aşağıdaki konulara bakın:</span><span class="sxs-lookup"><span data-stu-id="1f50c-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="1f50c-212">If ve Else deyimleri</span><span class="sxs-lookup"><span data-stu-id="1f50c-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="1f50c-213">While ekstresi</span><span class="sxs-lookup"><span data-stu-id="1f50c-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="1f50c-214">Do ekstresi</span><span class="sxs-lookup"><span data-stu-id="1f50c-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="1f50c-215">For deyimleri</span><span class="sxs-lookup"><span data-stu-id="1f50c-215">For statement</span></span>](../../language-reference/keywords/for.md)
