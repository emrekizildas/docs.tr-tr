### YamlMime:Tutorial
title: Dal ve döngü deyimleri ile koşullu mantık öğrenin
metadata:
  title: Dallar ve döngüler- C# etkileşimli öğreticiye giriş
  description: Dallar ve döngüler hakkında bu öğreticide, etkileşimli olarak öğrenmek C# için tarayıcınızı kullanacaksınız. Kod yazacak C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Liste koleksiyonu
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850786"
items:
- durationInMinutes: 1
  content: >
    Bu öğretici, değişkenleri inceleyen ve bu değişkenlere göre yürütme yolunu değiştiren bir kod yazmayı öğretir. Etkileşimli olarak yazmak C# ve kodunuzu derleyip çalıştırmanın sonuçlarını görmek için tarayıcınızı kullanacaksınız. Bu öğreticide, ' de C#dallanma ve döngü yapılarını keşfeden oluşan bir dizi ders bulunur. Bu dersler, C# dilin temellerini öğretir.
- title: If ifadesini kullanarak kararlar alın
  durationInMinutes: 4
  content: >
    Etkileşimli pencerede aşağıdaki kodu çalıştırın. Bunu yapmak için, etkileşimli pencereye aşağıdaki kod bloğunu yazın ve **Çalıştır** düğmesine tıklayın:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Bildirimi, toplamın 10 `b` ' dan küçük olacak şekilde değiştirin:


    ```csharp

    int b = 3;

    ```


    **Çalıştır** düğmesine tekrar tıklayın. Yanıt 10 ' dan az olduğu için hiçbir şey yazdırılmaz. Test ettiğiniz **koşul** false 'tur. Yalnızca bir `if` deyimin olası dallarından birini yazdığınız için yürütülecek bir kodunuz yok: doğru dal.


    > [!TIP]

    > Keşfederken C# (veya herhangi bir programlama dilini), kod yazarken hata oluşturursunuz. **Derleyici** bu hataları bulacak ve size rapor eder. Çıktı hata iletileri içerdiğinde, nelerin düzeltileceğini görmek için örnek koda ve etkileşimli penceredeki koda yakından bakın.

    > Bu alıştırma, C# kod yapısını öğrenmenize yardımcı olur.


    Bu ilk örnek, `if` ve Boolean türlerin gücünü gösterir. *Boolean* , iki değerden birine sahip olabilir bir değişkendir: `true` veya. `false` C#Boole değişkenleri `bool` için özel bir tür tanımlar. `if` İfade a`bool`değerini denetler. Değer `true`olduğunda, `if` yürütülür ' i izleyen ifade. Aksi takdirde, atlanır.


    Bu koşullara göre koşulları denetleme ve deyimleri yürütme işlemi çok güçlüdür. Daha fazlasını inceleyelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Eğer ve başka bir birlikte çalışır yap
  durationInMinutes: 10
  content: "\nDoğru ve yanlış dallarda farklı kodu yürütmek için, koşul yanlış olduğunda yürütülen bir `else` dal oluşturursunuz. Şunu deneyin:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n`else` Anahtar sözcüğünü izleyen ifade yalnızca `false`test edilen koşul olduğunda yürütülür. `if` Ve`else` Boole koşulları ile birleştirme, ihtiyacınız olan tüm gücü sağlar.\n\n> [!IMPORTANT]\n> `if` Ve`else` deyimlerinin altındaki girintileme insan okuyucular içindir.\n> Dil C# , girintileme veya boşluk olarak kabul etmez.\n> `if` Or`else` anahtar sözcüğünü izleyen ifade, koşula göre yürütülür. Bu öğreticideki tüm örnekler, ifadelerin denetim akışına göre satırları girintilemek için ortak bir uygulama izler.\n\nGirintileme önemli olmadığından, birden fazla deyimin koşullu olarak yürütülen `{` bloğun `}` bir parçası olmasını istediğiniz zaman göstermek için ve kullanmanız gerekir. C#programcılar genellikle bu ayraçları tüm `if` ve `else` yan tümcelerde kullanır. Aşağıdaki örnek, yeni oluşturduğunuz şeydir. Deneyin.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Bu öğreticinin geri kalanında, kod örnekleri, kabul edilen uygulamaları takip eden ayraçları içerir.\n\nDaha karmaşık koşulları test edebilirsiniz:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n`==` *Eşitlik*için simge testi. ' `==` Yi kullanarak, ' de gördüğünüz şekilde `a = 5`testi, atamanın eşitliğine ayırır.\n\n\"Ve\" temsil eder. `&&` Doğru dalda deyimin yürütülmesi için her iki koşulun de true olması gerektiği anlamına gelir.  Bu örnekler Ayrıca, ve `{` `}`içinde yer alan her bir koşullu dalda birden çok deyim olduğunu gösterir.\n\n\"Veya\" öğesini `||` göstermek için de kullanabilirsiniz:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n`a`, Ve`b`değerlerini değiştirin ve arasında`&&` geçiş yapın.`||` `c` `&&` Ve`||` işleçlerinin nasıl çalıştığını daha fazla anlayacaksınız.\n\n> [!NOTE]\n> Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.\n"
- title: İşlemleri yinelemek için döngüleri kullanma
  durationInMinutes: 6
  content: >
    Daha büyük programlar oluşturmak için başka bir önemli kavram **döngülere**sahiptir. Birden çok kez yürütülmesini istediğiniz deyimleri yinelemek için döngüleri kullanacaksınız. Etkileşimli pencerede şu kodu deneyin:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    İfade bir koşulu denetler ve ' den `while`sonraki ifadeyi yürütür. `while` Koşul false olana kadar koşulu denetlemeyi ve bu deyimleri yürütmeyi tekrarlayacak.


    Bu örnekte başka bir yeni işleç vardır. Değişken, **artırma** işlecinden `++`sonra. `counter` Sayaç değerine 1 ekler ve bu değeri sayaç değişkeninde depolar.


    > [!IMPORTANT]

    > Kodu yürüttığınızdan `while` döngü koşulunun false olarak geçdiğinizden emin olun. Aksi takdirde, programınızın hiç bitmediğini **sonsuz bir döngü** oluşturursunuz. Kodunuzu çalıştıran altyapının zaman aşımına uğradığından ve programınızda hiçbir çıkış göreceğinden, bunu gösterelim.


    `while` Döngü ,`while`sonrasında kodu yürütmeden önce koşulu sınar. `do` ... `while` döngü önce kodu yürütür ve sonra koşulu denetler. Şöyle görünür:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Bu `do` döngü ve önceki `while` döngü aynı şekilde çalışır.


    Bir son döngü ifadesine geçelim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: For döngüsü ile çalışma
  durationInMinutes: 5
  content: >
    C# Kodda göreceğiniz diğer bir yaygın döngü açıklaması `for` döngüdür. Etkileşimli pencerede şu kodu deneyin:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Bu, `while` döngüyle aynı çalışmayı `do` ve zaten kullandığınız döngüyü yapar. `for` İfadesinin nasıl çalıştığını denetleyen üç bölümü vardır.


    İlk bölüm **for başlatıcıdır**: `int counter = 0;` Loop değişkeni olduğunu bildirir `counter` ve başlangıç değerini olarak `0`ayarlar.


    Orta kısım **for koşuludur**: `counter < 10` sayacın değeri 10 ' dan `for` az olduğu sürece bu döngünün yürütülmeye devam ettiğini bildirir.


    Son bölüm, **Yineleyici için**: `counter++` `for` deyimden sonra blok yürütüldükten sonra döngü değişkeninin nasıl değiştirileceğini belirtir. Burada, blok her yürütüldüğünde `counter` 1 ' in artırılabilmelidir.


    Bunlarla deneyin. Aşağıdakilerin her birini deneyin:


    - Başlatıcıyı farklı bir değerle başlayacak şekilde değiştirin.

    - Koşulu, farklı bir değerde durdurulacak şekilde değiştirin.


    İşiniz bittiğinde, öğrendiklerinizi kullanmak için kendinize bir kod yazmak üzere ilerlim.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Dalları ve döngüleri birleştirme
  durationInMinutes: 12
  content: >
    Artık, ve içindeki `if` C# döngü yapılarını gördüğünüze göre, 3 ' e bölünebilen 1 ile 20 arasındaki C# tüm tamsayıların toplamını bulmak için kod yazıp yazbileceğinizi görün.  İşte birkaç ipucu:


    - `%` İşleci, bir bölme işleminin kalanını verir.

    - `if` İfade, bir sayının toplamın bir parçası olup olmadığını görmek için koşul sağlar.

    - `for` Döngü, 1 ile 20 arasındaki tüm sayılar için bir dizi adımı yinelemenize yardımcı olabilir.


    Kendiniz deneyin. Sonra nasıl yapıldığını kontrol edin. İpucu olarak bir yanıt için 63 almalısınız.


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Sınama Tamam
  durationInMinutes: 1
  content: >
    Bunun gibi bir konuyla karşılaştınız mı?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Bu çevrimiçi kodlama deneyimi önizleme modundadır. Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.
- title: Tebrikler!
  content: "\"Dallar ve döngüler\" Etkileşimli öğreticisini tamamladınız. Sonraki etkileşimli öğreticiye başlamak için aşağıdaki **liste koleksiyonu** bağlantısına tıklayabilir veya [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret ederek .NET Core SDK indirebilir, makinenizde bir proje oluşturabilir ve kodlamadan haberdar olabilirsiniz. \"Sonraki adımlar\" bölümü, sizi bu öğreticilere geri getirir.\n\nBu kavramlar hakkında daha fazla bilgi için aşağıdaki konulara bakın:\n\n- [If ve Else deyimleri](../../language-reference/keywords/if-else.md)\n- [While ekstresi](../../language-reference/keywords/while.md)\n- [Do ekstresi](../../language-reference/keywords/do.md)\n- [For deyimleri](../../language-reference/keywords/for.md)"
