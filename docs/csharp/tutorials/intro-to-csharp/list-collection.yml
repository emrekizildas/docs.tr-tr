### YamlMime:Tutorial
title: <span data-ttu-id="375c5-101">Genel liste türünü kullanarak veri koleksiyonlarını yönetmeyi öğrenin</span><span class="sxs-lookup"><span data-stu-id="375c5-101">Learn to manage data collections using the generic list type</span></span>
metadata:
  title: Veri koleksiyonları- C# etkileşimli öğreticiye giriş
  description: Bu öğreticide, etkileşimli olarak öğrenmek C# için tarayıcınızı kullanacaksınız. Kod yazar C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 6dfbbbb6ef64b3dbb83d15ba66860acb7c5b3585
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850748"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="375c5-105">Bu öğreticide, C# kodunuzu yazmak C# ve kodunuzu derleyip çalıştırmanın sonuçlarını görmek için tarayıcınızı kullanarak etkileşimli olarak öğretilir.</span><span class="sxs-lookup"><span data-stu-id="375c5-105">This tutorial teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id="375c5-106">Koleksiyonlar ve diziler oluşturan, değiştiren ve keşfetmenize yönelik bir dizi ders içerir.</span><span class="sxs-lookup"><span data-stu-id="375c5-106">It contains a series of lessons that create, modify, and explore collections and arrays.</span></span>
- title: <span data-ttu-id="375c5-107">Liste oluşturma</span><span class="sxs-lookup"><span data-stu-id="375c5-107">Create lists</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="375c5-108">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="375c5-108">Run the following code in the interactive window.</span></span> <span data-ttu-id="375c5-109">Bunu yapmak için, etkileşimli pencereye (adınızla değiştirin `<name>` ) aşağıdaki kod bloğunu yazın ve **Çalıştır** düğmesine tıklayın:</span><span class="sxs-lookup"><span data-stu-id="375c5-109">To do that, type the following code block in the interactive window (replace `<name>` with your name) and click the **Run** button:</span></span>


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="375c5-110">Dizelerin bir listesini oluşturdunuz, bu listeye üç ad eklediniz ve adları tüm büyük harfler halinde yazdırdık.</span><span class="sxs-lookup"><span data-stu-id="375c5-110">You've created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="375c5-111">Önceki öğreticilerde, listede döngü gerçekleştirmek için öğrenmiş olduğunuz kavramları kullanıyorsunuz.</span><span class="sxs-lookup"><span data-stu-id="375c5-111">You're using concepts that you've learned in earlier tutorials to loop through the list.</span></span>


    <span data-ttu-id="375c5-112">Adları görüntülenecek kod, [dize ilişkilendirme](../../language-reference/tokens/interpolated.md) özelliğini kullanır.</span><span class="sxs-lookup"><span data-stu-id="375c5-112">The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.</span></span> <span data-ttu-id="375c5-113">Bir `string` karakterden`$` önce karakterinden sonra, dize bildirimine C# kod ekleyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-113">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="375c5-114">Gerçek dize, bu C# kodun oluşturduğu değerle değiştirir.</span><span class="sxs-lookup"><span data-stu-id="375c5-114">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="375c5-115">Bu örnekte, <xref:System.String.ToUpper%2A?displayProperty=nameWithType> yöntemini çağırdığı için `{name.ToUpper()}` , her bir adla ' ı, büyük harflere dönüştürülecek şekilde değiştirir.</span><span class="sxs-lookup"><span data-stu-id="375c5-115">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A?displayProperty=nameWithType> method.</span></span>


    <span data-ttu-id="375c5-116">Araştırma devam edelim.</span><span class="sxs-lookup"><span data-stu-id="375c5-116">Let's keep exploring.</span></span>


    > [!NOTE]

    > <span data-ttu-id="375c5-117">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-117">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-118">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-118">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="375c5-119">Liste içeriğini değiştirme</span><span class="sxs-lookup"><span data-stu-id="375c5-119">Modify list contents</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="375c5-120">Oluşturduğunuz koleksiyon <xref:System.Collections.Generic.List%601> türünü kullanır.</span><span class="sxs-lookup"><span data-stu-id="375c5-120">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="375c5-121">Bu tür öğe dizilerini depolar.</span><span class="sxs-lookup"><span data-stu-id="375c5-121">This type stores sequences of elements.</span></span> <span data-ttu-id="375c5-122">Açılı ayraçlar arasındaki öğelerin türünü belirtirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-122">You specify the type of the elements between the angle brackets.</span></span>


    <span data-ttu-id="375c5-123">Bu <xref:System.Collections.Generic.List%601> türün önemli bir yönü büyümenin veya küçülebileceği, öğe eklemenize veya kaldırmanıza imkan sağlar.</span><span class="sxs-lookup"><span data-stu-id="375c5-123">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="375c5-124">İçeriğini görüntülendikten sonra içerikleri değiştirerek sonuçları görebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-124">You can see the results by modifying the contents after you've displayed its contents.</span></span> <span data-ttu-id="375c5-125">Zaten yazdığınız kodun altına aşağıdaki kodu ekleyin (içeriği yazdıran döngünün altında):</span><span class="sxs-lookup"><span data-stu-id="375c5-125">Add the following code below the code you've already written (below the loop that prints the contents):</span></span>


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="375c5-126">Listenin sonuna iki ad daha eklediniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-126">You've added two more names to the end of the list.</span></span> <span data-ttu-id="375c5-127">Ayrıca bir tane de kaldırmış olursunuz.</span><span class="sxs-lookup"><span data-stu-id="375c5-127">You've also removed one as well.</span></span> <span data-ttu-id="375c5-128">Bu kod bloğunun çıktısı başlangıçtaki içerikleri gösterir, ardından boş bir satırı ve yeni içerikleri yazdırır.</span><span class="sxs-lookup"><span data-stu-id="375c5-128">The output from this block of code shows the initial contents, then prints a blank line and the new contents.</span></span>


    <span data-ttu-id="375c5-129">, <xref:System.Collections.Generic.List%601> Tek tek öğeleri **dizine** göre de başvurmanızı sağlar.</span><span class="sxs-lookup"><span data-stu-id="375c5-129">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="375c5-130">`[` Ve`]` belirteçlerini kullanarak öğelere erişirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-130">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="375c5-131">Aşağıdaki kodu zaten yazdıklarınız altına ekleyin ve deneyin:</span><span class="sxs-lookup"><span data-stu-id="375c5-131">Add the following code below what you've already written and try it:</span></span>


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    <span data-ttu-id="375c5-132">Listenin sonuna kadar erişmenize izin verilmiyor.</span><span class="sxs-lookup"><span data-stu-id="375c5-132">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="375c5-133">Listenin <xref:System.Collections.Generic.List%601.Count%2A> özelliğini ne kadar süreyle kullandığını kontrol edebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-133">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="375c5-134">Denemek için aşağıdaki kodu ekleyin:</span><span class="sxs-lookup"><span data-stu-id="375c5-134">Add the following code to try it:</span></span>


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    <span data-ttu-id="375c5-135">Sonuçları görmek için yeniden **Çalıştır** ' a tıklayın.</span><span class="sxs-lookup"><span data-stu-id="375c5-135">Click **Run** again to see the results.</span></span> <span data-ttu-id="375c5-136">' C#De, dizinler 0 ' dan başlar, bu nedenle en büyük geçerli dizin listedeki öğe sayısından bir küçüktür.</span><span class="sxs-lookup"><span data-stu-id="375c5-136">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="375c5-137">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-137">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-138">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-138">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="375c5-139">Arama ve sıralama listeleri</span><span class="sxs-lookup"><span data-stu-id="375c5-139">Search and sort lists</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="375c5-140">Örneklerimizde görece küçük listeler kullanılıyor, ancak uygulamalarınız genellikle binlerce numaralandırma olan çok sayıda öğesi olan listeler oluşturabilir.</span><span class="sxs-lookup"><span data-stu-id="375c5-140">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="375c5-141">Bu daha büyük koleksiyonlardaki öğeleri bulmak için listede farklı öğeler için arama yapmanız gerekir.</span><span class="sxs-lookup"><span data-stu-id="375c5-141">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="375c5-142"><xref:System.Collections.Generic.List%601.IndexOf%2A> Yöntemi bir öğe arar ve öğenin dizinini döndürür.</span><span class="sxs-lookup"><span data-stu-id="375c5-142">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="375c5-143">Nasıl çalıştığını görmek için deneyin.</span><span class="sxs-lookup"><span data-stu-id="375c5-143">Try it to see how it works.</span></span>  <span data-ttu-id="375c5-144">Şu ana kadar yazdıklarınız için aşağıdaki kodu ekleyin:</span><span class="sxs-lookup"><span data-stu-id="375c5-144">Add the following code below what you've written so far:</span></span>


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    <span data-ttu-id="375c5-145">Listede bir öğe olup olmadığını bilmiyor olabilirsiniz, bu nedenle tarafından <xref:System.Collections.Generic.List%601.IndexOf%2A>döndürülen dizini her zaman denetlemeniz gerekir.</span><span class="sxs-lookup"><span data-stu-id="375c5-145">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="375c5-146">-1 ise, öğe bulunamadı.</span><span class="sxs-lookup"><span data-stu-id="375c5-146">If it is -1, the item was not found.</span></span>


    <span data-ttu-id="375c5-147">Listenizdeki öğeler de sıralanmış olabilir.</span><span class="sxs-lookup"><span data-stu-id="375c5-147">The items in your list can be sorted as well.</span></span> <span data-ttu-id="375c5-148"><xref:System.Collections.Generic.List%601.Sort%2A> Yöntemi, listedeki tüm öğeleri normal sıralarına göre sıralar (dizeler söz konusu olduğunda alfabetik olarak).</span><span class="sxs-lookup"><span data-stu-id="375c5-148">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="375c5-149">Bu kodu ekleyin ve yeniden çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="375c5-149">Add this code and run again:</span></span>


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > <span data-ttu-id="375c5-150">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-151">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="375c5-152">Diğer türlerin listeleri</span><span class="sxs-lookup"><span data-stu-id="375c5-152">Lists of other types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="375c5-153">Şu ana kadar listelerdeki `string` türü kullanıyorsunuz.</span><span class="sxs-lookup"><span data-stu-id="375c5-153">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="375c5-154">Farklı bir tür kullanalım. <xref:System.Collections.Generic.List%601></span><span class="sxs-lookup"><span data-stu-id="375c5-154">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="375c5-155">Bir sayı kümesi oluşturalım.</span><span class="sxs-lookup"><span data-stu-id="375c5-155">Let's build a set of numbers.</span></span> <span data-ttu-id="375c5-156">Şimdiye kadar yazdığınız kodu silin ve aşağıdaki kodla değiştirin:</span><span class="sxs-lookup"><span data-stu-id="375c5-156">Delete the code you wrote so far, and replace it with the following code:</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    <span data-ttu-id="375c5-157">Bu, tamsayıların bir listesini oluşturur ve ilk iki tamsayının değerini 1 değerine ayarlar.</span><span class="sxs-lookup"><span data-stu-id="375c5-157">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="375c5-158">*Fıbonaccı sırası*, sayı dizisi iki 1s ile başlar.</span><span class="sxs-lookup"><span data-stu-id="375c5-158">The *Fibonacci Sequence*, a sequence of numbers, starts with two 1s.</span></span> <span data-ttu-id="375c5-159">Her bir sonraki Fibonaccı numarası, önceki iki sayının toplamı alınarak bulunur.</span><span class="sxs-lookup"><span data-stu-id="375c5-159">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="375c5-160">Şu kodu ekleyin:</span><span class="sxs-lookup"><span data-stu-id="375c5-160">Add this code:</span></span>


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="375c5-161">Sonuçları görmek için **Çalıştır** ' a basın;</span><span class="sxs-lookup"><span data-stu-id="375c5-161">Press **Run** to see the results;</span></span>


    > [!NOTE]

    > <span data-ttu-id="375c5-162">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-163">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="375c5-164">Sına</span><span class="sxs-lookup"><span data-stu-id="375c5-164">Challenge</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="375c5-165">Bu ve önceki derslerden bazılarını bir araya getirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-165">See if you can put together some of the concepts from this and earlier lessons.</span></span> <span data-ttu-id="375c5-166">Fibonaccı numaralarına en fazla ne kadar derlediğiniz hakkında ' yı genişletin.</span><span class="sxs-lookup"><span data-stu-id="375c5-166">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="375c5-167">Dizideki ilk 20 sayıyı oluşturmak için kodu deneyin ve yazın.</span><span class="sxs-lookup"><span data-stu-id="375c5-167">Try and write the code to generate the first 20 numbers in the sequence.</span></span> <span data-ttu-id="375c5-168">(İpucu olarak, 20 fibonaccı numarası 6765 ' dir.)</span><span class="sxs-lookup"><span data-stu-id="375c5-168">(As a hint, the 20th Fibonacci number is 6765.)</span></span>


    > [!NOTE]

    > <span data-ttu-id="375c5-169">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-170">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="375c5-171">Sınama Tamam</span><span class="sxs-lookup"><span data-stu-id="375c5-171">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="375c5-172">Bunun gibi bir konuyla karşılaştınız mı?</span><span class="sxs-lookup"><span data-stu-id="375c5-172">Did you come up with something like this?</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="375c5-173">Döngünün her tekrarında, listedeki son iki tamsayının yerine getiriyorsunuz ve bu değeri listeye ekliyor olursunuz.</span><span class="sxs-lookup"><span data-stu-id="375c5-173">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id="375c5-174">Döngü, listeye 20 öğe ekleyinceye kadar yinelenir.</span><span class="sxs-lookup"><span data-stu-id="375c5-174">The loop repeats until you've added 20 items to the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="375c5-175">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="375c5-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="375c5-176">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="375c5-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="375c5-177">Etkileşimli öğreticiyi listesini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="375c5-177">You've completed the list interactive tutorial.</span></span> <span data-ttu-id="375c5-178">Bu, C# etkileşimli öğreticiye son bakış niteliğindedir.</span><span class="sxs-lookup"><span data-stu-id="375c5-178">That's the final introduction to C# interactive tutorial.</span></span> <span data-ttu-id="375c5-179">.NET Core SDK indirmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilir, makinenizde bir proje oluşturabilir ve kodlamayı tutabilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="375c5-179">You can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="375c5-180">"Sonraki adımlar" bölümü, sizi bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="375c5-180">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="375c5-181">Aşağıdaki makalelerde [.net koleksiyonları](../../../standard/collections/index.md) hakkında daha fazla bilgi edinebilirsiniz:</span><span class="sxs-lookup"><span data-stu-id="375c5-181">You can learn more about [.NET collections](../../../standard/collections/index.md) in the following articles:</span></span>

    - [<span data-ttu-id="375c5-182">Koleksiyon türü seçme</span><span class="sxs-lookup"><span data-stu-id="375c5-182">Selecting a collection type</span></span>](../../../standard/collections/selecting-a-collection-class.md)

    - [<span data-ttu-id="375c5-183">Yaygın olarak kullanılan koleksiyon türleri</span><span class="sxs-lookup"><span data-stu-id="375c5-183">Commonly used collection types</span></span>](../../../standard/collections/commonly-used-collection-types.md)

    - [<span data-ttu-id="375c5-184">Genel Koleksiyonlar ne zaman kullanılır?</span><span class="sxs-lookup"><span data-stu-id="375c5-184">When to use generic collections</span></span>](../../../standard/collections/when-to-use-generic-collections.md)
