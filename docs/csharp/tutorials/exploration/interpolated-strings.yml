### YamlMime:Tutorial
title: <span data-ttu-id="306c4-101">Biçimlendirilen dizeler oluşturmak için dize ilişkilendirmeyi kullanın</span><span class="sxs-lookup"><span data-stu-id="306c4-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: Dize ilişkilendirme- C# Etkileşimli öğretici
  description: Bu öğreticide, C# dize ilişkilendirme özelliğini etkileşimli olarak araştırmak için tarayıcınızı kullanacaksınız. Kod yazar C# ve kodunuzu doğrudan tarayıcıda derleyip çalıştırmanın sonuçlarını görürsünüz.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: eb4b1571b4d00d90034148f7b595f4499859ce4b
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: tr-TR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850951"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="306c4-105">Bu öğretici, tek bir dizeye değerler eklemek için [dize ilişkilendirmeyi](../../language-reference/tokens/interpolated.md) nasıl kullanacağınızı öğretir.</span><span class="sxs-lookup"><span data-stu-id="306c4-105">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="306c4-106">Sonuç dizesinin metin biçimlendirmesini nasıl denetleyeceğinizi de öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-106">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="306c4-107">Kodu yazmak ve çalıştırmak C# için tarayıcınızı kullanırsınız ve sonuçları hemen görebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-107">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="306c4-108">Enterpolasyonlu dize oluşturma</span><span class="sxs-lookup"><span data-stu-id="306c4-108">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="306c4-109">Etkileşimli pencerede aşağıdaki kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="306c4-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="306c4-110">Bunu yapmak için, kodu etkileşimli pencereye yazın (adınızla değiştirin `<name>` ) ve **Çalıştır**' ı seçin:</span><span class="sxs-lookup"><span data-stu-id="306c4-110">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="306c4-111">Kodu çalıştırdığınızda, **Çıkış** , selamdaki adınızı içeren bir dize görüntüler.</span><span class="sxs-lookup"><span data-stu-id="306c4-111">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="306c4-112"><xref:System.Console.WriteLine%2A> Yöntem çağrısının dize bağımsız değişkeni, bir *enterpolasyonlu dize ifadesidir*.</span><span class="sxs-lookup"><span data-stu-id="306c4-112">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string expression*.</span></span> <span data-ttu-id="306c4-113">Katıştırılmış kodu içeren bir dizeden tek bir dize ( *sonuç dizesi*olarak adlandırılır) oluşturmanıza imkan tanıyan bir şablon türüdür.</span><span class="sxs-lookup"><span data-stu-id="306c4-113">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="306c4-114">Enterpolasyonlu dize ifadeleri, bir dizeye değer eklemek veya birkaç dizeyi birleştirmek (birlikte birleştirmek) için özellikle faydalıdır.</span><span class="sxs-lookup"><span data-stu-id="306c4-114">Interpolated string expressions are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="306c4-115">Yukarıdaki örnek, her bir enterpolasyonlu dize ifadesinin sahip olması gereken iki öğeyi içerir:</span><span class="sxs-lookup"><span data-stu-id="306c4-115">The example above contains the two elements that every interpolated string expression must have:</span></span>


    - <span data-ttu-id="306c4-116">Açılış tırnak işareti karakterinden önce `$` karakteriyle başlayan bir dize sabit değeri.</span><span class="sxs-lookup"><span data-stu-id="306c4-116">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="306c4-117">`$` Sembol ve tırnak işareti karakteri arasında boşluk olamaz.</span><span class="sxs-lookup"><span data-stu-id="306c4-117">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="306c4-118">(Bir tane eklerseniz ne olacağını görmek isterseniz, etkileşimli penceredeki `$` karakterden sonra bir boşluk ekleyin ve güncelleştirilmiş kodu çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="306c4-118">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="306c4-119">C# Derleyici şikayetleri, "beklenmeyen karakter ' $ '".)</span><span class="sxs-lookup"><span data-stu-id="306c4-119">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="306c4-120">Bir veya daha fazla *ilişkilendirme ifadesi*.</span><span class="sxs-lookup"><span data-stu-id="306c4-120">One or more *interpolation expressions*.</span></span> <span data-ttu-id="306c4-121">Enterpolasyon ifadesi bir açma ve kapatma ayracı (`{` ve `}`) ile belirtilir.</span><span class="sxs-lookup"><span data-stu-id="306c4-121">An interpolation expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="306c4-122">Küme ayraçları içinde ( C# dahil `null`) bir değer döndüren herhangi bir ifadeyi yerleştirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-122">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="306c4-123">Biraz daha farklı veri türleriyle daha fazla dize ilişkilendirme örneği deneyelim.</span><span class="sxs-lookup"><span data-stu-id="306c4-123">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="306c4-124">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="306c4-124">This online coding experience is in preview mode.</span></span> <span data-ttu-id="306c4-125">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="306c4-125">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="306c4-126">Farklı veri türleri dahil et</span><span class="sxs-lookup"><span data-stu-id="306c4-126">Include different data types</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"306c4-127\">Önceki adımda, bir dizeyi diğerinin içine eklemek için dize ilişkilendirmeyi kullandınız.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-127\">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id=\"306c4-128\">Bir enterpolasyonlu dize ifadesinin parçası olan her ilişkilendirme ifadesi herhangi bir veri türünde olabilir, ancak.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-128\">Each interpolation expression that is part of an interpolated string expression can be of any data type, though.</span></span> <span data-ttu-id=\"306c4-129\">Enterpolasyonlu bir dizedeki çeşitli veri türü ifadelerinin değerlerini ekleyelim.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-129\">Let's include values of various data type expressions in an interpolated string.</span></span>\n\n<span data-ttu-id=\"306c4-130\">Aşağıdaki örnekte, ilk `Name`olarak, `Price`, ve `perPackage` üyeleri olan bir [tanımlama grubu](../../tuples.md) tanımladık.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-130\">In the following example, we first define a [tuple](../../tuples.md) that has `Name`, `Price`, and `perPackage` members.</span></span> <span data-ttu-id=\"306c4-131\">Etkileşimli pencerede aşağıdaki kodu çalıştırın:</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-131\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar item = (Name: \"eggplant\", Price: 1.99m, perPackage: 3);\nvar date = DateTime.Now;\nConsole.WriteLine($\"On {date}, the price of {item.Name} was {item.Price:C2} per {item.perPackage} items.\");\n```\n\n<span data-ttu-id=\"306c4-132\">Enterpolasyonlu dizedeki `item.Price` enterpolasyon ifadesinin sonuç dizesinde \"1,99\" metnine çözümlendiğine unutmayın.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-132\">Note that the interpolation expression `item.Price` in the interpolated string resolves to the text \"1.99\" in the result string.</span></span> <span data-ttu-id=\"306c4-133\">Yani, ifade sonucunun türü bir dize olmadığında, sonuç aşağıdaki şekilde bir dizeye çözülür:</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-133\">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>\n\n- <span data-ttu-id=\"306c4-134\">Enterpolasyon ifadesi olarak `null`değerlendirilirse, boş bir dize (\"\" veya <xref:System.String.Empty?displayProperty=nameWithType>) kullanılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-134\">If the interpolation expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>\n\n- <span data-ttu-id=\"306c4-135\">İlişkilendirme ifadesi olarak `null`değerlendirilmiyorsa, `ToString` genellikle sonuç ifadesinin yöntemi çağırılır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-135\">If the interpolation expression doesn't evaluate to `null`, typically the `ToString` method of the result expression is called.</span></span> \n\n<span data-ttu-id=\"306c4-136\">Bu örnekteki çıktıda, tarih çok kesin (eggbitki fiyatı her saniye değişmez) ve fiyat değeri bir para birimi göstermez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-136\">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"306c4-137\">Sonraki adımda, ifade sonuçlarının dize gösterimlerini denetleyerek bu sorunları nasıl giderebileceğinizi öğreneceksiniz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-137\">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"306c4-138\">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-138\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"306c4-139\">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"306c4-139\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="306c4-140">Enterpolasyon ifadelerinin biçimlendirmesini denetleme</span><span class="sxs-lookup"><span data-stu-id="306c4-140">Control the formatting of interpolation expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="306c4-141">Önceki adımda, sonuç dizesine hatalı biçimli iki dize eklenmiştir.</span><span class="sxs-lookup"><span data-stu-id="306c4-141">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="306c4-142">Bunlardan biri, yalnızca tarihin uygun olduğu tarih ve saat değeridir.</span><span class="sxs-lookup"><span data-stu-id="306c4-142">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="306c4-143">İkincisi, para birimi birimini göstermediğiniz bir fiyattır.</span><span class="sxs-lookup"><span data-stu-id="306c4-143">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="306c4-144">Her iki sorunun de kolay bir şekilde ele alınır.</span><span class="sxs-lookup"><span data-stu-id="306c4-144">Both issues are easy to address.</span></span> <span data-ttu-id="306c4-145">Dize ilişkilendirme, belirli türlerin biçimlendirilmesini denetleyen *Biçim dizelerini* belirtmenize olanak tanır.</span><span class="sxs-lookup"><span data-stu-id="306c4-145">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="306c4-146">Aşağıdaki satırda gösterildiği gibi `Console.WriteLine` , tarih ve fiyat ifadelerine yönelik biçim dizelerini dahil etmek için önceki örnekteki çağrısını değiştirin:</span><span class="sxs-lookup"><span data-stu-id="306c4-146">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item.Name} was {item.Price} per {item.perPackage} items");

    ```


    <span data-ttu-id="306c4-147">Bir biçim dizesini, iki nokta üst üste (":") ve biçim dizesiyle birlikte enterpolasyon ifadesini izleyerek belirtirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-147">You specify a format string by following the interpolation expression with a colon (":") and the format string.</span></span> <span data-ttu-id="306c4-148">"d", kısa tarih biçimini temsil eden [Standart bir tarih ve saat biçim dizesidir](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) .</span><span class="sxs-lookup"><span data-stu-id="306c4-148">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="306c4-149">"C2", ondalık ayırıcıdan sonraki iki basamakla para birimi değeri olarak bir sayıyı temsil eden [Standart bir sayısal biçim dizesidir](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) .</span><span class="sxs-lookup"><span data-stu-id="306c4-149">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="306c4-150">.NET kitaplıklarında bulunan birçok tür, önceden tanımlanmış bir biçim dizeleri kümesini destekler.</span><span class="sxs-lookup"><span data-stu-id="306c4-150">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="306c4-151">Bunlar, tüm sayısal türleri ve Tarih ve saat türlerini içerir.</span><span class="sxs-lookup"><span data-stu-id="306c4-151">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="306c4-152">Biçim dizelerini destekleyen türlerin tüm listesi için bkz. [.net makalesindeki biçimlendirme türleri](../../../standard/base-types/formatting-types.md) ' nde [Biçim dizeleri ve .NET sınıf kitaplığı türleri](../../../standard/base-types/formatting-types.md#stringRef) .</span><span class="sxs-lookup"><span data-stu-id="306c4-152">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="306c4-153">Tarih ve saat ve sayısal değer biçimlendirmesini nasıl etkilediğini görmek için örnekteki biçim dizelerini değiştirmeyi deneyin.</span><span class="sxs-lookup"><span data-stu-id="306c4-153">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="306c4-154">İçindeki `{date:d}` "d" öğesini "t" olarak değiştirin (kısa saat biçimini göstermek için), "y" (yılı ve ayı göstermek için) ve "yyyy" (yılı dört basamaklı bir sayı olarak göstermek için).</span><span class="sxs-lookup"><span data-stu-id="306c4-154">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="306c4-155">İçindeki `{price:C2}` "C2" öğesini "e" (üstel gösterim için) ve "F3" (ondalık ayırıcıdan sonra üç basamaklı bir sayısal değer için) olarak değiştirin.</span><span class="sxs-lookup"><span data-stu-id="306c4-155">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="306c4-156">Biçimlendirmeyi denetlemenin yanı sıra, sonuç dizesinde bulunan biçimlendirilmiş dizelerin alan genişliğini ve hizalamasını da denetleyebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-156">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="306c4-157">Sonraki adımda bunu nasıl yapacağınızı öğreneceksiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-157">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="306c4-158">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="306c4-158">This online coding experience is in preview mode.</span></span> <span data-ttu-id="306c4-159">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="306c4-159">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="306c4-160">Enterpolasyon ifadelerinin alan genişliğini ve hizalamasını denetleme</span><span class="sxs-lookup"><span data-stu-id="306c4-160">Control the field width and alignment of interpolation expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="306c4-161">Normalde, bir enterpolasyonlu dize ifadesinin sonucu dize olarak biçimlendirildiğinde, bu dize öndeki veya sondaki boşluklar olmadan bir sonuç dizesine dahil edilir.</span><span class="sxs-lookup"><span data-stu-id="306c4-161">Ordinarily, when the result of an interpolated string expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="306c4-162">Özellikle bir veri kümesiyle çalışırken, alan genişliğini denetleyebilmekte ve metin hizalaması daha okunabilir bir çıktı oluşturulmasına yardımcı olur.</span><span class="sxs-lookup"><span data-stu-id="306c4-162">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="306c4-163">Bunu görmek için aşağıdaki kodu çalıştırın:</span><span class="sxs-lookup"><span data-stu-id="306c4-163">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="306c4-164">Öğe adları sola hizalanır ve miktarları sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="306c4-164">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="306c4-165">Bir ilişkilendirme ifadesinden sonra bir virgül (",") ekleyerek ve *en az* alan genişliğini belirterek hizalamayı belirlersiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-165">You specify the alignment by adding a comma (",") after an interpolation expression and designating the *minimum* field width.</span></span> <span data-ttu-id="306c4-166">Belirtilen değer pozitif bir sayıysa, alan sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="306c4-166">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="306c4-167">Negatif bir sayı ise, alan sola hizalanır.</span><span class="sxs-lookup"><span data-stu-id="306c4-167">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="306c4-168">`{"Item",-25}` Ve`{item.Key,-25}` kodundan negatif işaretleri kaldırmayı deneyin ve örneği yeniden çalıştırın.</span><span class="sxs-lookup"><span data-stu-id="306c4-168">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="306c4-169">Bu kez, öğe adları sağa hizalanır.</span><span class="sxs-lookup"><span data-stu-id="306c4-169">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="306c4-170">Tek bir ilişkilendirme ifadesi için bir hizalama belirleyicisi ve biçim dizesi birleştirebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-170">You can combine an alignment specifier and a format string for a single interpolation expression.</span></span> <span data-ttu-id="306c4-171">Bunu yapmak için önce hizalamayı, ardından iki nokta üst üste ve biçim dizesini belirtin.</span><span class="sxs-lookup"><span data-stu-id="306c4-171">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="306c4-172">Tanımlı alan genişlikleri olan üç biçimli dizeyi görüntüleyen aşağıdaki kodu deneyin:</span><span class="sxs-lookup"><span data-stu-id="306c4-172">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="306c4-173">Bu çevrimiçi kodlama deneyimi önizleme modundadır.</span><span class="sxs-lookup"><span data-stu-id="306c4-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="306c4-174">Sorunlarla karşılaşırsanız, lütfen [DotNet/depoyu dene](https://github.com/dotnet/try/issues)' ye bildirin.</span><span class="sxs-lookup"><span data-stu-id="306c4-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="306c4-175">Dize ilişkilendirme etkileşimli öğreticisini tamamladınız.</span><span class="sxs-lookup"><span data-stu-id="306c4-175">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="306c4-176">Sonraki etkileşimli öğreticiye başlamak için aşağıdaki LINK **içindeki C# koleksiyonlara** tıklayabilirsiniz veya .NET Core SDK indirmek, makinenizde bir proje oluşturmak ve kodlamaya devam etmek için [.net sitesini](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) ziyaret edebilirsiniz.</span><span class="sxs-lookup"><span data-stu-id="306c4-176">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="306c4-177">"Sonraki adımlar" bölümü, sizi bu öğreticilere geri getirir.</span><span class="sxs-lookup"><span data-stu-id="306c4-177">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="306c4-178">Daha fazla bilgi için bkz. [dize ilişkilendirme](../../language-reference/tokens/interpolated.md).</span><span class="sxs-lookup"><span data-stu-id="306c4-178">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
